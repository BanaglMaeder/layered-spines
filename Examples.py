# The copy package is used to create deep copies
import copy
from ihspines import IC, Spine

###############################################################################
###################################EXAMPLES####################################
###############################################################################

# The functions cone and suspension accepts a simplicial complex as a list of 
# skeletons and repsectively returns a simplicial complex of the cone and the
# suspension on a given simpl. cplx. C.
def Cone(C):
    
    m = max(C[0])[0]
    K = copy.deepcopy(C)
    K.append([])
    
    for i in range(len(K)-1):
        for s in C[i]:
                t = copy.deepcopy(s)
                t.append(m+1)
                K[i+1].append(t)
                
    
    K[0].append([m+1])

    return K

def Suspension(C):
    
    m = max(C[0])[0]
    K = copy.deepcopy(C)
    K.append([])
    
    for i in range(len(K)-1):
        for s in C[i]:
            t = copy.deepcopy(s)
            r = copy.deepcopy(s)
            t.append(m+1)
            r.append(m+2)
            K[i+1].append(t)
            K[i+1].append(r)
    
    
    K[0].append([m+1])
    K[0].append([m+2])
    
    return K

# 2-Torus
T2 = [[[1],[2],[3],[4],[5],[6],[7]],[[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[2,3],
        [2,4],[2,5],[2,6],[2,7],[3,4],[3,5],[3,6],[3,7],[4,5],[4,6],[4,7],[5,6]
        ,[5,7],[6,7]],[[1,2,6],[2,6,7],[2,3,7],[1,3,7],[4,6,7],[4,5,7],[1,5,7],
         [1,5,6],[1,2,4],[2,4,5],[2,3,5],[3,5,6],[3,4,6],[1,3,4]]]

# Cone of T2
CT2 = Cone(T2)

# Suspension of 2-Torus
ST2 = Suspension(T2)

# Wedge sum of circles
S1vS1 = [[[1],[2],[3],[4],[5]],[[1,2],[2,3],[1,3],[2,4],[4,5],[2,5]]]

# Wedge sum of 2-spheres
S2vS2 = [[[1],[2],[3],[4],[5],[6],[7]],[[1,2],[1,7],[1,6],[2,7],[2,6],[2,3],
         [2,5],[2,4],[3,5],[3,4],[4,5],[6,7]],[[1,2,6],[1,6,7],[2,6,7],[2,3,4],
         [2,4,5],[2,3,5],[1,2,7],[3,4,5]]]

# Pinched Torus
PT2 = [[[1],[2],[3],[4],[5],[6],[7]],[[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],
        [2,4],[2,6],[2,7],[3,4],[3,5],[3,6],[3,7],[4,6],[4,7],[5,6],[5,7],
        [6,7]],[[1,2,4],[1,3,4],[3,4,6],[3,5,6],[1,3,7],[1,5,7]
        ,[3,5,7],[2,4,7],[2,6,7],[4,6,7],[1,2,6],[1,5,6]]]

###############################################################################
# Intersection Homology of simple examples:
    

# Intersection homology of Supended Torus ST2:
    
# For Upper Middle Perversity n(3) = 1

# Intersection chain complex complex and Betti numbers of upper middle 
# perversity intersection homology.
ICST2n, ICBettiST2n = IC(ST2,[ST2,[[[8],[9]]]],"n")

# For Lower Middle Perversity m(3) = 0

# IC complex and Betti numbers of upper middle perversity intersection homology
ICST2m, ICBettiST2m = IC(ST2,[ST2,[[[8],[9]]]],"m") 


# Betti numbers of Intersection homology of Pinched Torus PT2:
ICPT2, ICBettiPT2 = IC(PT2,[PT2,[[[7]]]],"0")


# Betti numbers of Intersection homology of S1vS1:
ICS1vS1, ICBettiS1vS1 = IC(S1vS1,[S1vS1,[[[2]]]],"-1")


# Betti numbers of Intersection homology of S2vS2:
ICS2vS2, ICBettiS2vS2 = IC(S2vS2,[S2vS2,[[[2]]]],"0")




###############################################################################
# Simple examples for spines and layered spines:

# Simplicial complex generated by a 3-simplex
F1 = [[[1],[2],[3],[4]],[[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]],[[1,2,3],[1,2,4],
       [1,3,4],[2,3,4]],[[1,2,3,4]]]
    
# Example computation for S0 = [[[1],[2]]] and C0 = [[[3],[4]]]
LaySpineF1 = Spine(F1,[[[1],[2]]],[[[3],[4]]]) 


# Example computation for S0 = [[]] = empty and C0 = all vertices
SpineF1 = Spine(F1,[[]],[[[1],[2],[3],[4]]])    

# Example of 8 points in the plane
F2 = [[[0],[1],[2],[3],[4],[5],[6],[7]],[[0,1],[1,2],[0,2],[0,5],[0,7],
            [2,3],[2,7],[3,7],[4,5],[4,6],[5,6],[5,7],[6,7]],
           [[0,1,2],[0,2,7],[0,5,7],[4,5,6],[5,6,7]],
           []]


# Example for S0 = [[[0],[1],[2],[3]]] and C0 = [[[4],[5],[6],[7]]]
LaySpineF2 = Spine(F2,S0 = [[[0],[1],[2],[3]]], C0 = [[[4],[5],[6],[7]]])

SpineF2 = Spine(F2,[[]],[F2[0]])
